# Ninja file generated by bang (https://cdelord.fr/bang)

ninja_required_version = 1.11.1

builddir = .build

######################################################################
# Compilation
######################################################################

rule compile
  description = CC $in
  command = clang -std=gnu2x -O3 -g -Werror -Wall -Wextra -Weverything -DUSE_MALLOC -Isrc -Wno-unsafe-buffer-usage -Wno-declaration-after-statement -fno-omit-frame-pointer -fno-optimize-sibling-calls -fno-sanitize-recover=all -fsanitize=address -fsanitize=undefined -fsanitize=float-divide-by-zero -fsanitize=unsigned-integer-overflow -fsanitize=implicit-conversion -fsanitize=local-bounds -fsanitize=float-cast-overflow -fsanitize=nullability-arg -fsanitize=nullability-assign -fsanitize=nullability-return -MD -MF $depfile -c $in -o $out
  depfile = $out.d

rule archive
  description = AR $out
  command = ar -crs $out $in

rule link
  description = LD $out
  command = clang -fsanitize=address -fsanitize=undefined $in -o $out

build $builddir/obj/src/arena.o: compile src/arena.c
build $builddir/lib/std.a: archive $builddir/obj/src/arena.o

######################################################################
# Tests
######################################################################

rule test
  description = TEST $in
  command = export ASAN_OPTIONS=check_initialization_order=1:detect_stack_use_after_return=1:detect_leaks=1; export UBSAN_OPTIONS=print_stacktrace=1; $in &> $out || ( cat $out; false )

build $builddir/obj/tests/test_arena.o: compile tests/test_arena.c
build $builddir/tests/test_arena: link $builddir/obj/tests/test_arena.o $builddir/lib/std.a
build $builddir/tests/test_arena.log: test $builddir/tests/test_arena

######################################################################
# Documentation
######################################################################

rule doc_macro.md
  description = DOC $in
  command = echo '@doc "$in"' > $out

rule ypp.md
  description = YPP $in
  command = ypp --MD --MF $depfile $in -o $out
  depfile = $out.d

rule pandoc.md
  description = PANDOC $out
  command = pandoc -t gfm $in -o $out

build $builddir/pipe/doc/arena-pipe-1.md: doc_macro.md src/arena.h
build $builddir/pipe/doc/arena-pipe-2.md: ypp.md $builddir/pipe/doc/arena-pipe-1.md
build doc/arena.md: pandoc.md $builddir/pipe/doc/arena-pipe-2.md
build $builddir/pipe/doc/std-pipe-1.md: doc_macro.md src/std.h
build $builddir/pipe/doc/std-pipe-2.md: ypp.md $builddir/pipe/doc/std-pipe-1.md
build doc/std.md: pandoc.md $builddir/pipe/doc/std-pipe-2.md

######################################################################
# Shortcuts
######################################################################

build test: phony $builddir/tests/test_arena.log
build doc: phony doc/arena.md doc/std.md
build all: phony test doc

default test

######################################################################
# Regenerate build.ninja when build.lua changes
######################################################################

rule bang
  command = bang $in -o $out
  generator = true

build build.ninja: bang build.lua
